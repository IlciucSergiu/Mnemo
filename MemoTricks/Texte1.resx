<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="home_info" xml:space="preserve">
    <value>   Un sistem mnemonic este un sistem care face memorarea usoara, rapida si distractiva. 
   Oamenilor le e greu sa isi aminteasca liste aleatorii de cuvinte, sau lucruri abstracte cum ar fi numerele sau cartile de joc, dar sunt excelenti cand vine vorba de imagini sau informatii spatiale. 
   Tehnicile de memorare profita de acest lucru.

                                                                                                                              </value>
  </data>
  <data name="home_info_2" xml:space="preserve">
    <value>Tot ce ai nevoie este putina imaginatie.</value>
  </data>
  <data name="text1_1" xml:space="preserve">
    <value>    Un sistem peg este o tehnica folositoare pentru memorarea unei liste de obiecte, nu foarte mare.
    Un “peg” (cuier) este un carlig mintal in care agatam informatia de care avem nevoie.                      Aceasta este o tehnica usoara si foarte utila.</value>
    <comment>Introducere</comment>
  </data>
  <data name="text1_2" xml:space="preserve">
    <value>Functioneaza prin asocierea obiectelor din lista pe care vrem sa o memoram, cu obiectele dintr-o alta lista bine cunoscuta.
  O asemenea lista ar fi numerele de la 1 la 10, literele de la A la Z deoarece nu pot fi uitate. Problema cu aceste liste este ca sunt abstracte (greu de visualizat), deaceea vom asocia fiecarui numar o imagine semnificativa.</value>
  </data>
  <data name="text1_3" xml:space="preserve">
    <value>  Aceasta este o lista cu imaginile pe care le-am asociat noi fiecarui numar.
  Din pacate aceasta lista trebuie invatata pe de rost, totusi forma imaginilor va face acest lucru foarte simplu.  
  De retinut ! (Aceste imagini nu se vor modifica, ci numai informatiile atasate lor).
  Totusi, daca doriti o alta imagine mai semnificativa, aveti libertatea de a schimba, dar de la bun inceput.</value>
  </data>
  <data name="text1_4" xml:space="preserve">
    <value>Exemplu:
   Daca al treilea element intr-o lista este o scrisoare, vom proceda in felul urmator :
   -	Mai intai trebuie sa cunoastem imaginea asociata numarului 3, in cazul acesta un arc.
   -	Apoi creem o imagine compusa din cele doua elemente.
   Imaginea poate fi ceva interesant amuzant sau ciudat pentru ca este mai usor de reapelat.</value>
  </data>
  <data name="text1_5" xml:space="preserve">
    <value>   Chiar daca nu este o tehnica prea complicata, necesita exercitiu, de aceea am creat urmatorul exercitiu  care consta in memorarea a zece obiecte dintr-o lista aleatoare.</value>
  </data>
  <data name="text2_1" xml:space="preserve">
    <value>    Metoda loci ( in latina “locuri” ), de asemenea numita palatul memoriei , este o tehnica existenta inca din Roma antica folosita de oratori renumiti precum Cicero si Quintilianus , fiind cunoscuta si sub numele de “Camera romana”.
    Asemenea metodei Peg, foloseste vizualizarea pentru a organiza si reaminti informatii. In acest caz, in loc de a folosi o lista memorata foloseste unele obiecte situate in locuri specifice, binecunoscute de utilizator pentru a aseza informatia.</value>
  </data>
  <data name="text2_2" xml:space="preserve">
    <value>    In cazul camerei romane, vom folosi imaginea unei camere in care va trebui mai intai sa stabilim ordinea exacta a pozitiilor in care vom aseza obiectele. Apoi vom pozitiona fiecare obiect din lista care trebuie memorata in locul corespunzator.
    Cand avem nevoie sa ne reamintim obiectele, nu trebuie decat sa parcurgem camera, vizualizand obiectele asezate acolo anterior.</value>
  </data>
  <data name="text2_3" xml:space="preserve">
    <value>  De exemplu, daca avem obiectele : inghetata, ursulet de plus si zmeu, vom organiza imaginea astfel…
    Cel mai mare beneficiu este ca folosind aceasta tehnica nu ai limita cand vine vorba de numarul de obiecte memorate, deoarece harta nu trebuie sa fie limitata doar la o camera.  Mai are denumirea si de “metoda calatoriei” deoarece folosind aceleasi principii, poti folosi o ruta binecunoscuta pe post de  harta mintala.</value>
  </data>
  <data name="text2_4" xml:space="preserve">
    <value>  Pentru a exersa aceasta tehnica am pregatit un exercitiu  pe care il numim Provocarea Jucariilor.</value>
  </data>
  <data name="text_info_1" xml:space="preserve">
    <value>Memoreaza aceasta lista de obiecte folosind sistemul Peg.                    </value>
  </data>
  <data name="text_info_2" xml:space="preserve">
    <value>Bifeaza butonul "Imagine" in cazul in care nu iti amintesti imaginea corespunzatoare numarului.</value>
  </data>
  <data name="text_testLociInfo" xml:space="preserve">
    <value>   Pentru acest exercitiu, va trebui sa memorati ordinea a 20 de jucarii. Chiar daca pare intimidant, veti observa ca metoda Loci face aceasta posibil.  
   Pentru a va ajuta, am pregatit o “harta” in acest caz imaginea unei case. Apasati butonul de mai jos pentru a o vizualiza inainte de a incepe exercitiul.</value>
  </data>
  <data name="text_testPegInfo" xml:space="preserve">
    <value>  Pentru exercitiul urmator v-a trebui sa memorati o lista de zece obiecte ordonate aleator folosind metoda Peg apoi sa le redati in exact aceeasi ordine.
   Scopul este sa aprofundati sceasta tehnica, iar pe parcurs veti observa ca timpul se va imbunatati considerabil.</value>
  </data>
  <data name="text_words_TestLoci" xml:space="preserve">
    <value>castel
puzzle
rata
trompeta
avion
cal
skateboard
tren
zmeu
papusa
catel
masina
pistol
yoyo
vapor
urs
robot
minge
dinozaur
telefon
coarda</value>
  </data>
  <data name="text_words_TestPeg" xml:space="preserve">
    <value>casa
masina
aspirator
laptop
cutit
sticla
lant
paine
umbrela
creion
carte
palarie
copac
papuc
tun
pistol
minge
ochelari
tren
scrisoare
zid
radio
pahar</value>
    <comment>Cuvinte pentru testare</comment>
  </data>
</root>